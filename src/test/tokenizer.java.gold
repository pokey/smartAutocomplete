<s>	BOS	NONE
package	ACTUAL	NONE
smartAutocomplete	ACTUAL	NONE
;	ACTUAL	NONE
import	ACTUAL	NONE
java	ACTUAL	NONE
.	ACTUAL	NONE
util	ACTUAL	NONE
.	ACTUAL	NONE
*	ACTUAL	NONE
;	ACTUAL	NONE
import	ACTUAL	NONE
java	ACTUAL	NONE
.	ACTUAL	NONE
util	ACTUAL	NONE
.	ACTUAL	NONE
regex	ACTUAL	NONE
.	ACTUAL	NONE
*	ACTUAL	NONE
;	ACTUAL	NONE
import	ACTUAL	NONE
fig	ACTUAL	NONE
.	ACTUAL	NONE
basic	ACTUAL	NONE
.	ACTUAL	NONE
*	ACTUAL	NONE
;	ACTUAL	NONE
import	ACTUAL	NONE
com	ACTUAL	NONE
.	ACTUAL	NONE
google	ACTUAL	NONE
.	ACTUAL	NONE
common	ACTUAL	NONE
.	ACTUAL	NONE
base	ACTUAL	NONE
.	ACTUAL	NONE
Joiner	ACTUAL	NONE
;	ACTUAL	NONE
public	ACTUAL	NONE
class	ACTUAL	NONE
Tokenizer	ACTUAL	NONE
{	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
final	ACTUAL	NONE
String	ACTUAL	NONE
numbers	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
[	ACTUAL	STRING
0	ACTUAL	STRING
-	ACTUAL	STRING
9	ACTUAL	STRING
]	ACTUAL	STRING
+	ACTUAL	STRING
(	ACTUAL	STRING
?	ACTUAL	STRING
:	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
.	ACTUAL	STRING
[	ACTUAL	STRING
0	ACTUAL	STRING
-	ACTUAL	STRING
9	ACTUAL	STRING
]	ACTUAL	STRING
+	ACTUAL	STRING
)	ACTUAL	STRING
?	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
final	ACTUAL	NONE
String	ACTUAL	NONE
words	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
\	ACTUAL	STRING
w	ACTUAL	STRING
+	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
final	ACTUAL	NONE
String	ACTUAL	NONE
symbols	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
!=	ACTUAL	STRING
|	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
+	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
+	ACTUAL	STRING
|	ACTUAL	STRING
--	ACTUAL	STRING
|	ACTUAL	STRING
&&	ACTUAL	STRING
|	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
|	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
||	ACTUAL	STRING
===	ACTUAL	STRING
|	ACTUAL	STRING
==	ACTUAL	STRING
|	ACTUAL	STRING
//	ACTUAL	STRING
|	ACTUAL	STRING
<=	ACTUAL	STRING
|	ACTUAL	STRING
>=	ACTUAL	STRING
|	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
+=	ACTUAL	STRING
|	ACTUAL	STRING
-=	ACTUAL	STRING
|	ACTUAL	STRING
/	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
*	ACTUAL	STRING
|	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
*/	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
final	ACTUAL	NONE
String	ACTUAL	NONE
newLine	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
(	ACTUAL	STRING
\	ACTUAL	STRING
r	ACTUAL	STRING
\	ACTUAL	STRING
n	ACTUAL	STRING
|	ACTUAL	STRING
\	ACTUAL	STRING
n	ACTUAL	STRING
|	ACTUAL	STRING
\	ACTUAL	STRING
r	ACTUAL	STRING
)	ACTUAL	STRING
[	ACTUAL	STRING
\	ACTUAL	STRING
t	ACTUAL	STRING
\	ACTUAL	STRING
f	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
v	ACTUAL	STRING
]	ACTUAL	STRING
*	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
final	ACTUAL	NONE
String	ACTUAL	NONE
python	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
"	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
final	ACTUAL	NONE
String	ACTUAL	NONE
other	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
[	ACTUAL	STRING
^	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
s	ACTUAL	STRING
\	ACTUAL	STRING
\	ACTUAL	STRING
w	ACTUAL	STRING
]	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
Pattern	ACTUAL	NONE
tokenizerRegex	ACTUAL	NONE
=	ACTUAL	NONE
Pattern	ACTUAL	NONE
.	ACTUAL	NONE
compile	ACTUAL	NONE
(	ACTUAL	NONE
Joiner	ACTUAL	NONE
.	ACTUAL	NONE
on	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
|	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
.	ACTUAL	NONE
join	ACTUAL	NONE
(	ACTUAL	NONE
Arrays	ACTUAL	NONE
.	ACTUAL	NONE
asList	ACTUAL	NONE
(	ACTUAL	NONE
numbers	ACTUAL	NONE
,	ACTUAL	NONE
words	ACTUAL	NONE
,	ACTUAL	NONE
symbols	ACTUAL	NONE
,	ACTUAL	NONE
newLine	ACTUAL	NONE
,	ACTUAL	NONE
python	ACTUAL	NONE
,	ACTUAL	NONE
other	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
static	ACTUAL	NONE
private	ACTUAL	NONE
String	ACTUAL	NONE
matching	ACTUAL	NONE
(	ACTUAL	NONE
String	ACTUAL	NONE
left	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
left	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
(	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
return	ACTUAL	NONE
"	ACTUAL	NONE
)	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
left	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
[	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
return	ACTUAL	NONE
"	ACTUAL	NONE
]	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
left	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
{	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
return	ACTUAL	NONE
"	ACTUAL	NONE
}	ACTUAL	STRING
"	ACTUAL	STRING
;	ACTUAL	NONE
throw	ACTUAL	NONE
new	ACTUAL	NONE
RuntimeException	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
Unexpected	ACTUAL	STRING
input	ACTUAL	STRING
to	ACTUAL	STRING
matching	ACTUAL	STRING
:	ACTUAL	STRING
"	ACTUAL	STRING
+	ACTUAL	NONE
left	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
static	ACTUAL	NONE
public	ACTUAL	NONE
List	ACTUAL	NONE
<	ACTUAL	NONE
Token	ACTUAL	NONE
>	ACTUAL	NONE
tokenize	ACTUAL	NONE
(	ACTUAL	NONE
String	ACTUAL	NONE
text	ACTUAL	NONE
,	ACTUAL	NONE
String	ACTUAL	NONE
path	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
boolean	ACTUAL	NONE
isPython	ACTUAL	NONE
=	ACTUAL	NONE
path	ACTUAL	NONE
.	ACTUAL	NONE
endsWith	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
.	ACTUAL	STRING
py	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
;	ACTUAL	NONE
List	ACTUAL	NONE
<	ACTUAL	NONE
Token	ACTUAL	NONE
>	ACTUAL	NONE
tokens	ACTUAL	NONE
=	ACTUAL	NONE
new	ACTUAL	NONE
ArrayList	ACTUAL	NONE
<	ACTUAL	NONE
Token	ACTUAL	NONE
>	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
ReadData	ACTUAL	NONE
.	ACTUAL	NONE
singleBOS	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
BEGIN	ACTUAL	NONE
,	ACTUAL	NONE
-	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
BEGIN	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
BOS	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
{	ACTUAL	NONE
for	ACTUAL	NONE
(	ACTUAL	NONE
int	ACTUAL	NONE
i	ACTUAL	NONE
=	ACTUAL	NONE
-	ACTUAL	NONE
(	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
ngramOrder	ACTUAL	NONE
-	ACTUAL	NONE
1	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
i	ACTUAL	NONE
<	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
i	ACTUAL	NONE
++	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
BEGIN	ACTUAL	NONE
,	ACTUAL	NONE
i	ACTUAL	NONE
*	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
BEGIN	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
BOS	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
boolean	ACTUAL	NONE
inComment	ACTUAL	NONE
=	ACTUAL	NONE
false	ACTUAL	NONE
;	ACTUAL	NONE
boolean	ACTUAL	NONE
isLongComment	ACTUAL	NONE
=	ACTUAL	NONE
false	ACTUAL	NONE
;	ACTUAL	NONE
String	ACTUAL	NONE
inQuote	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
;	ACTUAL	NONE
HashMap	ACTUAL	NONE
<	ACTUAL	NONE
String	ACTUAL	NONE
,	ACTUAL	NONE
Integer	ACTUAL	NONE
>	ACTUAL	NONE
parenDepth	ACTUAL	NONE
=	ACTUAL	NONE
new	ACTUAL	NONE
HashMap	ACTUAL	NONE
<	ACTUAL	NONE
String	ACTUAL	NONE
,	ACTUAL	NONE
Integer	ACTUAL	NONE
>	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
int	ACTUAL	NONE
sumParenDepth	ACTUAL	NONE
=	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
String	ACTUAL	NONE
prevToken	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
;	ACTUAL	NONE
String	ACTUAL	NONE
prevPrevToken	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
;	ACTUAL	NONE
String	ACTUAL	NONE
newLine	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
;	ACTUAL	NONE
ArrayList	ACTUAL	NONE
<	ACTUAL	NONE
Integer	ACTUAL	NONE
>	ACTUAL	NONE
indentStack	ACTUAL	NONE
=	ACTUAL	NONE
new	ACTUAL	NONE
ArrayList	ACTUAL	NONE
<	ACTUAL	NONE
Integer	ACTUAL	NONE
>	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
int	ACTUAL	NONE
start	ACTUAL	NONE
=	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
String	ACTUAL	NONE
token	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
;	ACTUAL	NONE
int	ACTUAL	NONE
prevStart	ACTUAL	NONE
=	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
Matcher	ACTUAL	NONE
match	ACTUAL	NONE
=	ACTUAL	NONE
tokenizerRegex	ACTUAL	NONE
.	ACTUAL	NONE
matcher	ACTUAL	NONE
(	ACTUAL	NONE
text	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
context	ACTUAL	NONE
=	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
;	ACTUAL	NONE
while	ACTUAL	NONE
(	ACTUAL	NONE
match	ACTUAL	NONE
.	ACTUAL	NONE
find	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
token	ACTUAL	NONE
=	ACTUAL	NONE
match	ACTUAL	NONE
.	ACTUAL	NONE
group	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
start	ACTUAL	NONE
=	ACTUAL	NONE
match	ACTUAL	NONE
.	ACTUAL	NONE
start	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
ReadData	ACTUAL	NONE
.	ACTUAL	NONE
toLower	ACTUAL	NONE
)	ACTUAL	NONE
token	ACTUAL	NONE
=	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
toLowerCase	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
token	ACTUAL	NONE
=	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
vocab	ACTUAL	NONE
!=	ACTUAL	NONE
null	ACTUAL	NONE
&&	ACTUAL	NONE
!	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
vocab	ACTUAL	NONE
.	ACTUAL	NONE
contains	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
)	ACTUAL	NONE
?	ACTUAL	NONE
Main	ACTUAL	NONE
.	ACTUAL	NONE
OOV	ACTUAL	NONE
:	ACTUAL	NONE
token	ACTUAL	NONE
;	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
charAt	ACTUAL	NONE
(	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
'	ACTUAL	NONE
\	ACTUAL	STRING
r	ACTUAL	STRING
'	ACTUAL	STRING
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
charAt	ACTUAL	NONE
(	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
'	ACTUAL	NONE
\	ACTUAL	STRING
n	ACTUAL	STRING
'	ACTUAL	STRING
)	ACTUAL	NONE
{	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
!	ACTUAL	NONE
(	ACTUAL	NONE
inQuote	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
>	ACTUAL	NONE
0	ACTUAL	NONE
||	ACTUAL	NONE
sumParenDepth	ACTUAL	NONE
>	ACTUAL	NONE
0	ACTUAL	NONE
||	ACTUAL	NONE
(	ACTUAL	NONE
!	ACTUAL	NONE
inComment	ACTUAL	NONE
&&	ACTUAL	NONE
prevToken	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
newLine	ACTUAL	NONE
=	ACTUAL	NONE
token	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
{	ACTUAL	NONE
//	ACTUAL	NONE
Emit	ACTUAL	COMMENT
last	ACTUAL	COMMENT
'	ACTUAL	COMMENT
\	ACTUAL	COMMENT
'	ACTUAL	COMMENT
token	ACTUAL	COMMENT
if	ACTUAL	COMMENT
it	ACTUAL	COMMENT
wasn	ACTUAL	COMMENT
'	ACTUAL	COMMENT
t	ACTUAL	COMMENT
the	ACTUAL	COMMENT
last	ACTUAL	COMMENT
character	ACTUAL	COMMENT
in	ACTUAL	COMMENT
the	ACTUAL	COMMENT
line	ACTUAL	COMMENT
if	ACTUAL	NONE
(	ACTUAL	NONE
prevToken	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
,	ACTUAL	NONE
prevStart	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
ACTUAL	ACTUAL	NONE
,	ACTUAL	NONE
context	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Beginning	ACTUAL	COMMENT
of	ACTUAL	COMMENT
line	ACTUAL	COMMENT
if	ACTUAL	NONE
(	ACTUAL	NONE
newLine	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
>	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
!	ACTUAL	NONE
isLongComment	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
inComment	ACTUAL	NONE
=	ACTUAL	NONE
false	ACTUAL	NONE
;	ACTUAL	NONE
context	ACTUAL	NONE
=	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
isPython	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
,	ACTUAL	NONE
start	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
NEWLINE	ACTUAL	NONE
,	ACTUAL	NONE
context	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
int	ACTUAL	NONE
indent	ACTUAL	NONE
=	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
int	ACTUAL	NONE
j	ACTUAL	NONE
=	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
//	ACTUAL	NONE
Find	ACTUAL	COMMENT
end	ACTUAL	COMMENT
of	ACTUAL	COMMENT
newline	ACTUAL	COMMENT
sequence	ACTUAL	COMMENT
for	ACTUAL	NONE
(	ACTUAL	NONE
j	ACTUAL	NONE
=	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
j	ACTUAL	NONE
<	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
j	ACTUAL	NONE
++	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
charAt	ACTUAL	NONE
(	ACTUAL	NONE
j	ACTUAL	NONE
)	ACTUAL	NONE
!=	ACTUAL	NONE
'	ACTUAL	NONE
\	ACTUAL	STRING
r	ACTUAL	STRING
'	ACTUAL	STRING
&&	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
charAt	ACTUAL	NONE
(	ACTUAL	NONE
j	ACTUAL	NONE
)	ACTUAL	NONE
!=	ACTUAL	NONE
'	ACTUAL	NONE
\	ACTUAL	STRING
f	ACTUAL	STRING
'	ACTUAL	STRING
&&	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
charAt	ACTUAL	NONE
(	ACTUAL	NONE
j	ACTUAL	NONE
)	ACTUAL	NONE
!=	ACTUAL	NONE
'	ACTUAL	NONE
\	ACTUAL	STRING
n	ACTUAL	STRING
'	ACTUAL	STRING
)	ACTUAL	NONE
break	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Compute	ACTUAL	COMMENT
new	ACTUAL	COMMENT
indent	ACTUAL	COMMENT
for	ACTUAL	NONE
(	ACTUAL	NONE
int	ACTUAL	NONE
i	ACTUAL	NONE
=	ACTUAL	NONE
j	ACTUAL	NONE
;	ACTUAL	NONE
i	ACTUAL	NONE
<	ACTUAL	NONE
newLine	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
i	ACTUAL	NONE
++	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
newLine	ACTUAL	NONE
.	ACTUAL	NONE
charAt	ACTUAL	NONE
(	ACTUAL	NONE
i	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
'	ACTUAL	NONE
'	ACTUAL	STRING
)	ACTUAL	NONE
indent	ACTUAL	NONE
+=	ACTUAL	NONE
1	ACTUAL	NONE
;	ACTUAL	NONE
else	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
newLine	ACTUAL	NONE
.	ACTUAL	NONE
charAt	ACTUAL	NONE
(	ACTUAL	NONE
i	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
'	ACTUAL	NONE
\	ACTUAL	STRING
t	ACTUAL	STRING
'	ACTUAL	STRING
)	ACTUAL	NONE
{	ACTUAL	NONE
indent	ACTUAL	NONE
+=	ACTUAL	NONE
8	ACTUAL	NONE
;	ACTUAL	NONE
indent	ACTUAL	NONE
=	ACTUAL	NONE
(	ACTUAL	NONE
indent	ACTUAL	NONE
/	ACTUAL	NONE
8	ACTUAL	NONE
)	ACTUAL	NONE
*	ACTUAL	NONE
8	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Add	ACTUAL	COMMENT
INDENT	ACTUAL	COMMENT
or	ACTUAL	COMMENT
DEDENT	ACTUAL	COMMENT
tokens	ACTUAL	COMMENT
and	ACTUAL	COMMENT
update	ACTUAL	COMMENT
indentStack	ACTUAL	COMMENT
if	ACTUAL	NONE
(	ACTUAL	NONE
indent	ACTUAL	NONE
>	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
get	ACTUAL	NONE
(	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
size	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
-	ACTUAL	NONE
1	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
indent	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
,	ACTUAL	NONE
start	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
INDENT	ACTUAL	NONE
,	ACTUAL	NONE
context	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
{	ACTUAL	NONE
while	ACTUAL	NONE
(	ACTUAL	NONE
indent	ACTUAL	NONE
<	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
get	ACTUAL	NONE
(	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
size	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
-	ACTUAL	NONE
1	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
remove	ACTUAL	NONE
(	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
size	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
-	ACTUAL	NONE
1	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
,	ACTUAL	NONE
start	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
DEDENT	ACTUAL	NONE
,	ACTUAL	NONE
context	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Reset	ACTUAL	COMMENT
newLine	ACTUAL	COMMENT
newLine	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
;	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Python	ACTUAL	COMMENT
ignores	ACTUAL	COMMENT
newlines	ACTUAL	COMMENT
within	ACTUAL	COMMENT
brackets	ACTUAL	COMMENT
if	ACTUAL	NONE
(	ACTUAL	NONE
isPython	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
(	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
[	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
{	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
&&	ACTUAL	NONE
!	ACTUAL	NONE
inComment	ACTUAL	NONE
&&	ACTUAL	NONE
inQuote	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
MapUtils	ACTUAL	NONE
.	ACTUAL	NONE
incr	ACTUAL	NONE
(	ACTUAL	NONE
parenDepth	ACTUAL	NONE
,	ACTUAL	NONE
matching	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
)	ACTUAL	NONE
,	ACTUAL	NONE
1	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
sumParenDepth	ACTUAL	NONE
++	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
)	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
]	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
}	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
&&	ACTUAL	NONE
!	ACTUAL	NONE
inComment	ACTUAL	NONE
&&	ACTUAL	NONE
inQuote	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
MapUtils	ACTUAL	NONE
.	ACTUAL	NONE
incr	ACTUAL	NONE
(	ACTUAL	NONE
parenDepth	ACTUAL	NONE
,	ACTUAL	NONE
token	ACTUAL	NONE
,	ACTUAL	NONE
-	ACTUAL	NONE
1	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
sumParenDepth	ACTUAL	NONE
--	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Add	ACTUAL	COMMENT
token	ACTUAL	COMMENT
,	ACTUAL	COMMENT
unless	ACTUAL	COMMENT
it	ACTUAL	COMMENT
is	ACTUAL	COMMENT
'	ACTUAL	COMMENT
\	ACTUAL	COMMENT
'	ACTUAL	COMMENT
,	ACTUAL	COMMENT
in	ACTUAL	COMMENT
which	ACTUAL	COMMENT
case	ACTUAL	COMMENT
we	ACTUAL	COMMENT
don	ACTUAL	COMMENT
'	ACTUAL	COMMENT
t	ACTUAL	COMMENT
emit	ACTUAL	COMMENT
it	ACTUAL	COMMENT
//	ACTUAL	NONE
if	ACTUAL	COMMENT
it	ACTUAL	COMMENT
'	ACTUAL	COMMENT
s	ACTUAL	COMMENT
the	ACTUAL	COMMENT
last	ACTUAL	COMMENT
token	ACTUAL	COMMENT
of	ACTUAL	COMMENT
the	ACTUAL	COMMENT
line	ACTUAL	COMMENT
if	ACTUAL	NONE
(	ACTUAL	NONE
!	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
,	ACTUAL	NONE
start	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
ACTUAL	ACTUAL	NONE
,	ACTUAL	NONE
context	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Comments	ACTUAL	COMMENT
and	ACTUAL	COMMENT
strings	ACTUAL	COMMENT
if	ACTUAL	NONE
(	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
#	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
//	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
&&	ACTUAL	NONE
inQuote	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
inComment	ACTUAL	NONE
=	ACTUAL	NONE
true	ACTUAL	NONE
;	ACTUAL	NONE
context	ACTUAL	NONE
=	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
COMMENT	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
/*	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
&&	ACTUAL	NONE
inQuote	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
0	ACTUAL	NONE
&&	ACTUAL	NONE
!	ACTUAL	NONE
inComment	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
inComment	ACTUAL	NONE
=	ACTUAL	NONE
true	ACTUAL	NONE
;	ACTUAL	NONE
isLongComment	ACTUAL	NONE
=	ACTUAL	NONE
true	ACTUAL	NONE
;	ACTUAL	NONE
context	ACTUAL	NONE
=	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
COMMENT	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
*/	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
&&	ACTUAL	NONE
isLongComment	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
inComment	ACTUAL	NONE
=	ACTUAL	NONE
false	ACTUAL	NONE
;	ACTUAL	NONE
isLongComment	ACTUAL	NONE
=	ACTUAL	NONE
false	ACTUAL	NONE
;	ACTUAL	NONE
context	ACTUAL	NONE
=	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
"	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
"	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
'	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
&&	ACTUAL	NONE
!	ACTUAL	NONE
inComment	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
inQuote	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
token	ACTUAL	NONE
)	ACTUAL	NONE
&&	ACTUAL	NONE
(	ACTUAL	NONE
prevPrevToken	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
||	ACTUAL	NONE
!	ACTUAL	NONE
prevToken	ACTUAL	NONE
.	ACTUAL	NONE
equals	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
\	ACTUAL	STRING
\	ACTUAL	STRING
"	ACTUAL	STRING
)	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
inQuote	ACTUAL	NONE
=	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
;	ACTUAL	NONE
context	ACTUAL	NONE
=	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
else	ACTUAL	NONE
if	ACTUAL	NONE
(	ACTUAL	NONE
inQuote	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
==	ACTUAL	NONE
0	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
inQuote	ACTUAL	NONE
=	ACTUAL	NONE
token	ACTUAL	NONE
;	ACTUAL	NONE
context	ACTUAL	NONE
=	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
STRING	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
prevPrevToken	ACTUAL	NONE
=	ACTUAL	NONE
prevToken	ACTUAL	NONE
;	ACTUAL	NONE
prevToken	ACTUAL	NONE
=	ACTUAL	NONE
token	ACTUAL	NONE
;	ACTUAL	NONE
prevStart	ACTUAL	NONE
=	ACTUAL	NONE
start	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
//	ACTUAL	NONE
Add	ACTUAL	COMMENT
final	ACTUAL	COMMENT
newline	ACTUAL	COMMENT
and	ACTUAL	COMMENT
clear	ACTUAL	COMMENT
indentStack	ACTUAL	COMMENT
by	ACTUAL	COMMENT
adding	ACTUAL	COMMENT
DEDENT	ACTUAL	COMMENT
tokens	ACTUAL	COMMENT
as	ACTUAL	COMMENT
//	ACTUAL	NONE
necessary	ACTUAL	COMMENT
to	ACTUAL	COMMENT
close	ACTUAL	COMMENT
all	ACTUAL	COMMENT
scopes	ACTUAL	COMMENT
if	ACTUAL	NONE
(	ACTUAL	NONE
isPython	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
,	ACTUAL	NONE
start	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
NEWLINE	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
for	ACTUAL	NONE
(	ACTUAL	NONE
int	ACTUAL	NONE
i	ACTUAL	NONE
=	ACTUAL	NONE
0	ACTUAL	NONE
;	ACTUAL	NONE
i	ACTUAL	NONE
<	ACTUAL	NONE
indentStack	ACTUAL	NONE
.	ACTUAL	NONE
size	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
-	ACTUAL	NONE
1	ACTUAL	NONE
;	ACTUAL	NONE
i	ACTUAL	NONE
++	ACTUAL	NONE
)	ACTUAL	NONE
{	ACTUAL	NONE
tokens	ACTUAL	NONE
.	ACTUAL	NONE
add	ACTUAL	NONE
(	ACTUAL	NONE
new	ACTUAL	NONE
Token	ACTUAL	NONE
(	ACTUAL	NONE
"	ACTUAL	NONE
"	ACTUAL	STRING
,	ACTUAL	NONE
start	ACTUAL	NONE
+	ACTUAL	NONE
token	ACTUAL	NONE
.	ACTUAL	NONE
length	ACTUAL	NONE
(	ACTUAL	NONE
)	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Type	ACTUAL	NONE
.	ACTUAL	NONE
DEDENT	ACTUAL	NONE
,	ACTUAL	NONE
Token	ACTUAL	NONE
.	ACTUAL	NONE
Context	ACTUAL	NONE
.	ACTUAL	NONE
NONE	ACTUAL	NONE
)	ACTUAL	NONE
)	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
return	ACTUAL	NONE
tokens	ACTUAL	NONE
;	ACTUAL	NONE
}	ACTUAL	NONE
}	ACTUAL	NONE
